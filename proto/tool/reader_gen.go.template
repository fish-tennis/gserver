// Code generated by proto_code_gen. DO NOT EDIT
// github.com/fish-tennis/proto_code_gen
package gen

import (
    {{if .ImportAnyPb}}"google.golang.org/protobuf/types/known/anypb"{{end}}
	"github.com/fish-tennis/gserver/pb"
)

{{range $index, $element := .MessageList}}
type {{.MessageName}}R struct {
	v *pb.{{.MessageName}}
}

func New{{.MessageName}}R(src *pb.{{.MessageName}}) *{{.MessageName}}R {
	return &{{.MessageName}}R{v:src}
}

func (r *{{.MessageName}}R) Raw() *pb.{{.MessageName}} {
	return r.v
}
{{range .Fields}}
{{if .IsStruct}}
func (r *{{$element.MessageName}}R) Get{{.FieldName}}() {{.FieldType}}R {
	return New{{.FieldTypeWithoutPtr}}R(r.v.Get{{.FieldName}}())
}{{else if .IsNormalSlice}}func (r *{{$element.MessageName}}R) Get{{.FieldName}}() []{{.ElemTypeName}} {
	src := r.v.Get{{.FieldName}}()
    if src == nil {
        return nil
    }
    copySlice := make([]{{.ElemTypeName}},len(src))
    copy(copySlice, src)
    return copySlice
}{{else if .IsPtrSlice}}func (r *{{$element.MessageName}}R) Get{{.FieldName}}() []*{{.ElemTypeName}}R {
	src := r.v.Get{{.FieldName}}()
    if src == nil {
        return nil
    }
    sliceReader := make([]*{{.ElemTypeName}}R,len(src))
    for i,v := range src {
        sliceReader[i] = New{{.ElemTypeName}}R(v)
    }
    return sliceReader
}{{else}}func (r *{{$element.MessageName}}R) Get{{.FieldName}}() {{.FieldType}} {
	return r.v.Get{{.FieldName}}()
}{{end}}
{{end}}
{{end}}