// Code generated by proto_code_gen. DO NOT EDIT
// github.com/fish-tennis/proto_code_gen
package gen

import (
    {{if .ImportAnyPb}}"google.golang.org/protobuf/types/known/anypb"{{end}}
	"github.com/fish-tennis/gserver/pb"
)

{{range $index, $element := .MessageList}}
type {{.MessageName}}R struct {
	v *pb.{{.MessageName}}
}

func New{{.MessageName}}R(src *pb.{{.MessageName}}) *{{.MessageName}}R {
	return &{{.MessageName}}R{v:src}
}

func (r *{{.MessageName}}R) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *{{.MessageName}}R) Raw() *pb.{{.MessageName}} {
    if r == nil {
        return nil
    }
	return r.v
}
{{range .Fields}}
{{if .IsStruct}}
func (r *{{$element.MessageName}}R) Get{{.FieldName}}() {{.FieldType}}R {
	return New{{.FieldTypeWithoutPtr}}R(r.v.Get{{.FieldName}}())
}{{else if .IsNormalSlice}}func (r *{{$element.MessageName}}R) LenOf{{.FieldName}}() int {
    return len(r.v.Get{{.FieldName}}())
}
func (r *{{$element.MessageName}}R) ElemOf{{.FieldName}}(index int) {{.ElemTypeName}} {
    return r.v.Get{{.FieldName}}()[index]
}{{else if .IsPtrSlice}}func (r *{{$element.MessageName}}R) LenOf{{.FieldName}}() int {
    return len(r.v.Get{{.FieldName}}())
}
func (r *{{$element.MessageName}}R) ElemOf{{.FieldName}}(index int) *{{.ElemTypeName}}R {
    return New{{.ElemTypeName}}R(r.v.Get{{.FieldName}}()[index])
}{{else if .IsNormalMap}}func (r *{{$element.MessageName}}R) LenOf{{.FieldName}}() int {
    return len(r.v.Get{{.FieldName}}())
}
func (r *{{$element.MessageName}}R) ElemOf{{.FieldName}}(key {{.MapKeyTypeName}}) {{.ElemTypeName}} {
    return r.v.Get{{.FieldName}}()[key]
}
func (r *{{$element.MessageName}}R) Range{{.FieldName}}(f func(k {{.MapKeyTypeName}},v {{.ElemTypeName}}) bool) {
    for k,v := range r.v.Get{{.FieldName}}() {
        if !f(k,v) {
            return
        }
    }
}{{else if .IsPtrMap}}func (r *{{$element.MessageName}}R) LenOf{{.FieldName}}() int {
    return len(r.v.Get{{.FieldName}}())
}
func (r *{{$element.MessageName}}R) ElemOf{{.FieldName}}(key {{.MapKeyTypeName}}) *{{.ElemTypeName}}R {
    if v,ok := r.v.Get{{.FieldName}}()[key]; ok {
        return New{{.ElemTypeName}}R(v)
    }
    return nil
}
func (r *{{$element.MessageName}}R) Range{{.FieldName}}(f func(k {{.MapKeyTypeName}},v *{{.ElemTypeName}}R) bool) {
    for k,v := range r.v.Get{{.FieldName}}() {
        if !f(k,New{{.ElemTypeName}}R(v)) {
            return
        }
    }
}{{else}}func (r *{{$element.MessageName}}R) Get{{.FieldName}}() {{.FieldType}} {
	return r.v.Get{{.FieldName}}()
}{{end}}
{{end}}
{{end}}