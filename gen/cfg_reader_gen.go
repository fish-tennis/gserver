// Code generated by proto_code_gen. DO NOT EDIT
package gen

import (
    
	"github.com/fish-tennis/gserver/pb"
)


type ItemNumR struct {
	v *pb.ItemNum
}

func NewItemNumR(src *pb.ItemNum) *ItemNumR {
	return &ItemNumR{v:src}
}

func (r *ItemNumR) Raw() *pb.ItemNum {
	return r.v
}

func (r *ItemNumR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ItemNumR) GetNum() int32 {
	return r.v.GetNum()
}


type ItemCfgR struct {
	v *pb.ItemCfg
}

func NewItemCfgR(src *pb.ItemCfg) *ItemCfgR {
	return &ItemCfgR{v:src}
}

func (r *ItemCfgR) Raw() *pb.ItemCfg {
	return r.v
}

func (r *ItemCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ItemCfgR) GetName() string {
	return r.v.GetName()
}

func (r *ItemCfgR) GetDetail() string {
	return r.v.GetDetail()
}

func (r *ItemCfgR) GetItemType() int32 {
	return r.v.GetItemType()
}

func (r *ItemCfgR) GetTimeType() int32 {
	return r.v.GetTimeType()
}

func (r *ItemCfgR) GetTimeout() int32 {
	return r.v.GetTimeout()
}


type AddItemArgR struct {
	v *pb.AddItemArg
}

func NewAddItemArgR(src *pb.AddItemArg) *AddItemArgR {
	return &AddItemArgR{v:src}
}

func (r *AddItemArgR) Raw() *pb.AddItemArg {
	return r.v
}

func (r *AddItemArgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *AddItemArgR) GetNum() int32 {
	return r.v.GetNum()
}

func (r *AddItemArgR) GetTimeType() int32 {
	return r.v.GetTimeType()
}

func (r *AddItemArgR) GetTimeout() int32 {
	return r.v.GetTimeout()
}

func (r *AddItemArgR) GetSource() int32 {
	return r.v.GetSource()
}


type DelItemArgR struct {
	v *pb.DelItemArg
}

func NewDelItemArgR(src *pb.DelItemArg) *DelItemArgR {
	return &DelItemArgR{v:src}
}

func (r *DelItemArgR) Raw() *pb.DelItemArg {
	return r.v
}

func (r *DelItemArgR) GetUniqueId() int64 {
	return r.v.GetUniqueId()
}

func (r *DelItemArgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *DelItemArgR) GetNum() int32 {
	return r.v.GetNum()
}

func (r *DelItemArgR) GetSource() int32 {
	return r.v.GetSource()
}


type BaseQuestCfgR struct {
	v *pb.BaseQuestCfg
}

func NewBaseQuestCfgR(src *pb.BaseQuestCfg) *BaseQuestCfgR {
	return &BaseQuestCfgR{v:src}
}

func (r *BaseQuestCfgR) Raw() *pb.BaseQuestCfg {
	return r.v
}

func (r *BaseQuestCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *BaseQuestCfgR) GetName() string {
	return r.v.GetName()
}

func (r *BaseQuestCfgR) GetQuestType() int32 {
	return r.v.GetQuestType()
}

func (r *BaseQuestCfgR) GetRewards() []*AddItemArgR {
	src := r.v.GetRewards()
    if src == nil {
        return nil
    }
    sliceReader := make([]*AddItemArgR,len(src))
    for i,v := range src {
        sliceReader[i] = NewAddItemArgR(v)
    }
    return sliceReader
}

func (r *BaseQuestCfgR) GetPreQuest() int32 {
	return r.v.GetPreQuest()
}

func (r *BaseQuestCfgR) GetDetail() string {
	return r.v.GetDetail()
}


type BaseConditionCfgR struct {
	v *pb.BaseConditionCfg
}

func NewBaseConditionCfgR(src *pb.BaseConditionCfg) *BaseConditionCfgR {
	return &BaseConditionCfgR{v:src}
}

func (r *BaseConditionCfgR) Raw() *pb.BaseConditionCfg {
	return r.v
}

func (r *BaseConditionCfgR) GetType() int32 {
	return r.v.GetType()
}

func (r *BaseConditionCfgR) GetKey() string {
	return r.v.GetKey()
}

func (r *BaseConditionCfgR) GetOp() string {
	return r.v.GetOp()
}

func (r *BaseConditionCfgR) GetArg() int32 {
	return r.v.GetArg()
}


type BaseProgressCfgR struct {
	v *pb.BaseProgressCfg
}

func NewBaseProgressCfgR(src *pb.BaseProgressCfg) *BaseProgressCfgR {
	return &BaseProgressCfgR{v:src}
}

func (r *BaseProgressCfgR) Raw() *pb.BaseProgressCfg {
	return r.v
}

func (r *BaseProgressCfgR) GetType() int32 {
	return r.v.GetType()
}

func (r *BaseProgressCfgR) GetCountType() int32 {
	return r.v.GetCountType()
}

func (r *BaseProgressCfgR) GetTotal() int32 {
	return r.v.GetTotal()
}


type BaseActivityCfgR struct {
	v *pb.BaseActivityCfg
}

func NewBaseActivityCfgR(src *pb.BaseActivityCfg) *BaseActivityCfgR {
	return &BaseActivityCfgR{v:src}
}

func (r *BaseActivityCfgR) Raw() *pb.BaseActivityCfg {
	return r.v
}

func (r *BaseActivityCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *BaseActivityCfgR) GetName() string {
	return r.v.GetName()
}

func (r *BaseActivityCfgR) GetDetail() string {
	return r.v.GetDetail()
}

func (r *BaseActivityCfgR) GetTemplate() string {
	return r.v.GetTemplate()
}

func (r *BaseActivityCfgR) GetRefreshType() int32 {
	return r.v.GetRefreshType()
}

func (r *BaseActivityCfgR) GetCycleType() int32 {
	return r.v.GetCycleType()
}

func (r *BaseActivityCfgR) GetTimeType() int32 {
	return r.v.GetTimeType()
}

func (r *BaseActivityCfgR) GetBeginTime() int32 {
	return r.v.GetBeginTime()
}

func (r *BaseActivityCfgR) GetEndTime() int32 {
	return r.v.GetEndTime()
}

func (r *BaseActivityCfgR) GetExchanges() []*ExchangeCfgR {
	src := r.v.GetExchanges()
    if src == nil {
        return nil
    }
    sliceReader := make([]*ExchangeCfgR,len(src))
    for i,v := range src {
        sliceReader[i] = NewExchangeCfgR(v)
    }
    return sliceReader
}

func (r *BaseActivityCfgR) GetIsOff() bool {
	return r.v.GetIsOff()
}

func (r *BaseActivityCfgR) GetRemoveDataWhenEnd() bool {
	return r.v.GetRemoveDataWhenEnd()
}

func (r *BaseActivityCfgR) GetMinPlayerLevel() int32 {
	return r.v.GetMinPlayerLevel()
}

func (r *BaseActivityCfgR) GetMaxPlayerLevel() int32 {
	return r.v.GetMaxPlayerLevel()
}

func (r *BaseActivityCfgR) GetQuests() []int32 {
	src := r.v.GetQuests()
    if src == nil {
        return nil
    }
    copySlice := make([]int32,len(src))
    copy(copySlice, src)
    return copySlice
}


type ExchangeCfgR struct {
	v *pb.ExchangeCfg
}

func NewExchangeCfgR(src *pb.ExchangeCfg) *ExchangeCfgR {
	return &ExchangeCfgR{v:src}
}

func (r *ExchangeCfgR) Raw() *pb.ExchangeCfg {
	return r.v
}

func (r *ExchangeCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ExchangeCfgR) GetConsumeItems() []*DelItemArgR {
	src := r.v.GetConsumeItems()
    if src == nil {
        return nil
    }
    sliceReader := make([]*DelItemArgR,len(src))
    for i,v := range src {
        sliceReader[i] = NewDelItemArgR(v)
    }
    return sliceReader
}

func (r *ExchangeCfgR) GetRewards() []*AddItemArgR {
	src := r.v.GetRewards()
    if src == nil {
        return nil
    }
    sliceReader := make([]*AddItemArgR,len(src))
    for i,v := range src {
        sliceReader[i] = NewAddItemArgR(v)
    }
    return sliceReader
}

func (r *ExchangeCfgR) GetCountLimit() int32 {
	return r.v.GetCountLimit()
}


type LevelExpR struct {
	v *pb.LevelExp
}

func NewLevelExpR(src *pb.LevelExp) *LevelExpR {
	return &LevelExpR{v:src}
}

func (r *LevelExpR) Raw() *pb.LevelExp {
	return r.v
}

func (r *LevelExpR) GetLevel() int32 {
	return r.v.GetLevel()
}

func (r *LevelExpR) GetNeedExp() int32 {
	return r.v.GetNeedExp()
}

