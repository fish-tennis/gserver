// Code generated by proto_code_gen. DO NOT EDIT
// github.com/fish-tennis/proto_code_gen
package gen

import (
    
	"github.com/fish-tennis/gserver/pb"
)


type ItemNumR struct {
	v *pb.ItemNum
}

func NewItemNumR(src *pb.ItemNum) *ItemNumR {
	return &ItemNumR{v:src}
}

func (r *ItemNumR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ItemNumR) Raw() *pb.ItemNum {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ItemNumR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ItemNumR) GetNum() int32 {
	return r.v.GetNum()
}


type ItemCfgR struct {
	v *pb.ItemCfg
}

func NewItemCfgR(src *pb.ItemCfg) *ItemCfgR {
	return &ItemCfgR{v:src}
}

func (r *ItemCfgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ItemCfgR) Raw() *pb.ItemCfg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ItemCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ItemCfgR) GetName() string {
	return r.v.GetName()
}

func (r *ItemCfgR) GetDetail() string {
	return r.v.GetDetail()
}

func (r *ItemCfgR) GetItemType() int32 {
	return r.v.GetItemType()
}

func (r *ItemCfgR) GetTimeType() int32 {
	return r.v.GetTimeType()
}

func (r *ItemCfgR) GetTimeout() int32 {
	return r.v.GetTimeout()
}


type AddElemArgR struct {
	v *pb.AddElemArg
}

func NewAddElemArgR(src *pb.AddElemArg) *AddElemArgR {
	return &AddElemArgR{v:src}
}

func (r *AddElemArgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *AddElemArgR) Raw() *pb.AddElemArg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *AddElemArgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *AddElemArgR) GetNum() int32 {
	return r.v.GetNum()
}

func (r *AddElemArgR) GetTimeType() int32 {
	return r.v.GetTimeType()
}

func (r *AddElemArgR) GetTimeout() int32 {
	return r.v.GetTimeout()
}

func (r *AddElemArgR) GetSource() int32 {
	return r.v.GetSource()
}

func (r *AddElemArgR) LenOfProperties() int {
    return len(r.v.GetProperties())
}
func (r *AddElemArgR) ElemOfProperties(key string) string {
    return r.v.GetProperties()[key]
}
func (r *AddElemArgR) RangeProperties(f func(k string,v string) bool) {
    for k,v := range r.v.GetProperties() {
        if !f(k,v) {
            return
        }
    }
}


type DelElemArgR struct {
	v *pb.DelElemArg
}

func NewDelElemArgR(src *pb.DelElemArg) *DelElemArgR {
	return &DelElemArgR{v:src}
}

func (r *DelElemArgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *DelElemArgR) Raw() *pb.DelElemArg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *DelElemArgR) GetUniqueId() int64 {
	return r.v.GetUniqueId()
}

func (r *DelElemArgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *DelElemArgR) GetNum() int32 {
	return r.v.GetNum()
}

func (r *DelElemArgR) GetSource() int32 {
	return r.v.GetSource()
}

func (r *DelElemArgR) LenOfProperties() int {
    return len(r.v.GetProperties())
}
func (r *DelElemArgR) ElemOfProperties(key string) string {
    return r.v.GetProperties()[key]
}
func (r *DelElemArgR) RangeProperties(f func(k string,v string) bool) {
    for k,v := range r.v.GetProperties() {
        if !f(k,v) {
            return
        }
    }
}


type CfgArgR struct {
	v *pb.CfgArg
}

func NewCfgArgR(src *pb.CfgArg) *CfgArgR {
	return &CfgArgR{v:src}
}

func (r *CfgArgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *CfgArgR) Raw() *pb.CfgArg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *CfgArgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *CfgArgR) GetArg() int32 {
	return r.v.GetArg()
}


type QuestCfgR struct {
	v *pb.QuestCfg
}

func NewQuestCfgR(src *pb.QuestCfg) *QuestCfgR {
	return &QuestCfgR{v:src}
}

func (r *QuestCfgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *QuestCfgR) Raw() *pb.QuestCfg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *QuestCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *QuestCfgR) GetName() string {
	return r.v.GetName()
}

func (r *QuestCfgR) GetQuestType() int32 {
	return r.v.GetQuestType()
}

func (r *QuestCfgR) GetRefreshType() int32 {
	return r.v.GetRefreshType()
}

func (r *QuestCfgR) LenOfRewards() int {
    return len(r.v.GetRewards())
}
func (r *QuestCfgR) ElemOfRewards(index int) *AddElemArgR {
    return NewAddElemArgR(r.v.GetRewards()[index])
}

func (r *QuestCfgR) GetPreQuest() int32 {
	return r.v.GetPreQuest()
}

func (r *QuestCfgR) LenOfNextQuests() int {
    return len(r.v.GetNextQuests())
}
func (r *QuestCfgR) ElemOfNextQuests(index int) int32 {
    return r.v.GetNextQuests()[index]
}

func (r *QuestCfgR) LenOfConditions() int {
    return len(r.v.GetConditions())
}
func (r *QuestCfgR) ElemOfConditions(index int) *ConditionCfgR {
    return NewConditionCfgR(r.v.GetConditions()[index])
}


func (r *QuestCfgR) GetProgress() *ProgressCfgR {
	return NewProgressCfgR(r.v.GetProgress())
}

func (r *QuestCfgR) LenOfProperties() int {
    return len(r.v.GetProperties())
}
func (r *QuestCfgR) ElemOfProperties(key string) string {
    return r.v.GetProperties()[key]
}
func (r *QuestCfgR) RangeProperties(f func(k string,v string) bool) {
    for k,v := range r.v.GetProperties() {
        if !f(k,v) {
            return
        }
    }
}

func (r *QuestCfgR) GetCategory() int32 {
	return r.v.GetCategory()
}

func (r *QuestCfgR) GetDetail() string {
	return r.v.GetDetail()
}

func (r *QuestCfgR) LenOfConditionTemplates() int {
    return len(r.v.GetConditionTemplates())
}
func (r *QuestCfgR) ElemOfConditionTemplates(index int) *CfgArgR {
    return NewCfgArgR(r.v.GetConditionTemplates()[index])
}


func (r *QuestCfgR) GetProgressTemplate() *CfgArgR {
	return NewCfgArgR(r.v.GetProgressTemplate())
}


type ConditionCfgR struct {
	v *pb.ConditionCfg
}

func NewConditionCfgR(src *pb.ConditionCfg) *ConditionCfgR {
	return &ConditionCfgR{v:src}
}

func (r *ConditionCfgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ConditionCfgR) Raw() *pb.ConditionCfg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ConditionCfgR) GetType() int32 {
	return r.v.GetType()
}

func (r *ConditionCfgR) GetKey() string {
	return r.v.GetKey()
}

func (r *ConditionCfgR) GetOp() string {
	return r.v.GetOp()
}

func (r *ConditionCfgR) GetArg() int32 {
	return r.v.GetArg()
}

func (r *ConditionCfgR) LenOfProperties() int {
    return len(r.v.GetProperties())
}
func (r *ConditionCfgR) ElemOfProperties(key string) string {
    return r.v.GetProperties()[key]
}
func (r *ConditionCfgR) RangeProperties(f func(k string,v string) bool) {
    for k,v := range r.v.GetProperties() {
        if !f(k,v) {
            return
        }
    }
}


type ConditionTemplateCfgR struct {
	v *pb.ConditionTemplateCfg
}

func NewConditionTemplateCfgR(src *pb.ConditionTemplateCfg) *ConditionTemplateCfgR {
	return &ConditionTemplateCfgR{v:src}
}

func (r *ConditionTemplateCfgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ConditionTemplateCfgR) Raw() *pb.ConditionTemplateCfg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ConditionTemplateCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ConditionTemplateCfgR) GetType() int32 {
	return r.v.GetType()
}

func (r *ConditionTemplateCfgR) GetKey() string {
	return r.v.GetKey()
}

func (r *ConditionTemplateCfgR) GetOp() string {
	return r.v.GetOp()
}

func (r *ConditionTemplateCfgR) LenOfProperties() int {
    return len(r.v.GetProperties())
}
func (r *ConditionTemplateCfgR) ElemOfProperties(key string) string {
    return r.v.GetProperties()[key]
}
func (r *ConditionTemplateCfgR) RangeProperties(f func(k string,v string) bool) {
    for k,v := range r.v.GetProperties() {
        if !f(k,v) {
            return
        }
    }
}


type ProgressCfgR struct {
	v *pb.ProgressCfg
}

func NewProgressCfgR(src *pb.ProgressCfg) *ProgressCfgR {
	return &ProgressCfgR{v:src}
}

func (r *ProgressCfgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ProgressCfgR) Raw() *pb.ProgressCfg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ProgressCfgR) GetType() int32 {
	return r.v.GetType()
}

func (r *ProgressCfgR) GetTotal() int32 {
	return r.v.GetTotal()
}

func (r *ProgressCfgR) GetNeedInit() bool {
	return r.v.GetNeedInit()
}

func (r *ProgressCfgR) GetEvent() string {
	return r.v.GetEvent()
}

func (r *ProgressCfgR) GetEventField() string {
	return r.v.GetEventField()
}

func (r *ProgressCfgR) LenOfProperties() int {
    return len(r.v.GetProperties())
}
func (r *ProgressCfgR) ElemOfProperties(key string) string {
    return r.v.GetProperties()[key]
}
func (r *ProgressCfgR) RangeProperties(f func(k string,v string) bool) {
    for k,v := range r.v.GetProperties() {
        if !f(k,v) {
            return
        }
    }
}


type ProgressTemplateCfgR struct {
	v *pb.ProgressTemplateCfg
}

func NewProgressTemplateCfgR(src *pb.ProgressTemplateCfg) *ProgressTemplateCfgR {
	return &ProgressTemplateCfgR{v:src}
}

func (r *ProgressTemplateCfgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ProgressTemplateCfgR) Raw() *pb.ProgressTemplateCfg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ProgressTemplateCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ProgressTemplateCfgR) GetType() int32 {
	return r.v.GetType()
}

func (r *ProgressTemplateCfgR) GetCountType() int32 {
	return r.v.GetCountType()
}

func (r *ProgressTemplateCfgR) GetNeedInit() bool {
	return r.v.GetNeedInit()
}

func (r *ProgressTemplateCfgR) GetEvent() string {
	return r.v.GetEvent()
}

func (r *ProgressTemplateCfgR) GetEventField() string {
	return r.v.GetEventField()
}

func (r *ProgressTemplateCfgR) LenOfProperties() int {
    return len(r.v.GetProperties())
}
func (r *ProgressTemplateCfgR) ElemOfProperties(key string) string {
    return r.v.GetProperties()[key]
}
func (r *ProgressTemplateCfgR) RangeProperties(f func(k string,v string) bool) {
    for k,v := range r.v.GetProperties() {
        if !f(k,v) {
            return
        }
    }
}


type ExchangeCfgR struct {
	v *pb.ExchangeCfg
}

func NewExchangeCfgR(src *pb.ExchangeCfg) *ExchangeCfgR {
	return &ExchangeCfgR{v:src}
}

func (r *ExchangeCfgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ExchangeCfgR) Raw() *pb.ExchangeCfg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ExchangeCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ExchangeCfgR) LenOfConditions() int {
    return len(r.v.GetConditions())
}
func (r *ExchangeCfgR) ElemOfConditions(index int) *ConditionCfgR {
    return NewConditionCfgR(r.v.GetConditions()[index])
}

func (r *ExchangeCfgR) LenOfConsumes() int {
    return len(r.v.GetConsumes())
}
func (r *ExchangeCfgR) ElemOfConsumes(index int) *DelElemArgR {
    return NewDelElemArgR(r.v.GetConsumes()[index])
}

func (r *ExchangeCfgR) LenOfRewards() int {
    return len(r.v.GetRewards())
}
func (r *ExchangeCfgR) ElemOfRewards(index int) *AddElemArgR {
    return NewAddElemArgR(r.v.GetRewards()[index])
}

func (r *ExchangeCfgR) GetCountLimit() int32 {
	return r.v.GetCountLimit()
}

func (r *ExchangeCfgR) GetRefreshType() int32 {
	return r.v.GetRefreshType()
}

func (r *ExchangeCfgR) LenOfProperties() int {
    return len(r.v.GetProperties())
}
func (r *ExchangeCfgR) ElemOfProperties(key string) string {
    return r.v.GetProperties()[key]
}
func (r *ExchangeCfgR) RangeProperties(f func(k string,v string) bool) {
    for k,v := range r.v.GetProperties() {
        if !f(k,v) {
            return
        }
    }
}

func (r *ExchangeCfgR) LenOfConditionTemplates() int {
    return len(r.v.GetConditionTemplates())
}
func (r *ExchangeCfgR) ElemOfConditionTemplates(index int) *CfgArgR {
    return NewCfgArgR(r.v.GetConditionTemplates()[index])
}


type ActivityCfgR struct {
	v *pb.ActivityCfg
}

func NewActivityCfgR(src *pb.ActivityCfg) *ActivityCfgR {
	return &ActivityCfgR{v:src}
}

func (r *ActivityCfgR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ActivityCfgR) Raw() *pb.ActivityCfg {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ActivityCfgR) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ActivityCfgR) GetName() string {
	return r.v.GetName()
}

func (r *ActivityCfgR) GetDetail() string {
	return r.v.GetDetail()
}

func (r *ActivityCfgR) GetTemplate() string {
	return r.v.GetTemplate()
}

func (r *ActivityCfgR) GetRefreshType() int32 {
	return r.v.GetRefreshType()
}

func (r *ActivityCfgR) GetCycleType() int32 {
	return r.v.GetCycleType()
}

func (r *ActivityCfgR) GetTimeType() int32 {
	return r.v.GetTimeType()
}

func (r *ActivityCfgR) GetBeginTime() int32 {
	return r.v.GetBeginTime()
}

func (r *ActivityCfgR) GetEndTime() int32 {
	return r.v.GetEndTime()
}

func (r *ActivityCfgR) LenOfExchangeIds() int {
    return len(r.v.GetExchangeIds())
}
func (r *ActivityCfgR) ElemOfExchangeIds(index int) int32 {
    return r.v.GetExchangeIds()[index]
}

func (r *ActivityCfgR) GetIsOff() bool {
	return r.v.GetIsOff()
}

func (r *ActivityCfgR) GetRemoveDataWhenEnd() bool {
	return r.v.GetRemoveDataWhenEnd()
}

func (r *ActivityCfgR) GetMinPlayerLevel() int32 {
	return r.v.GetMinPlayerLevel()
}

func (r *ActivityCfgR) GetMaxPlayerLevel() int32 {
	return r.v.GetMaxPlayerLevel()
}

func (r *ActivityCfgR) LenOfQuestIds() int {
    return len(r.v.GetQuestIds())
}
func (r *ActivityCfgR) ElemOfQuestIds(index int) int32 {
    return r.v.GetQuestIds()[index]
}

func (r *ActivityCfgR) LenOfProperties() int {
    return len(r.v.GetProperties())
}
func (r *ActivityCfgR) ElemOfProperties(key string) string {
    return r.v.GetProperties()[key]
}
func (r *ActivityCfgR) RangeProperties(f func(k string,v string) bool) {
    for k,v := range r.v.GetProperties() {
        if !f(k,v) {
            return
        }
    }
}


type LevelExpR struct {
	v *pb.LevelExp
}

func NewLevelExpR(src *pb.LevelExp) *LevelExpR {
	return &LevelExpR{v:src}
}

func (r *LevelExpR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *LevelExpR) Raw() *pb.LevelExp {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *LevelExpR) GetLevel() int32 {
	return r.v.GetLevel()
}

func (r *LevelExpR) GetNeedExp() int32 {
	return r.v.GetNeedExp()
}

