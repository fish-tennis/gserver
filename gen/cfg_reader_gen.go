// Code generated by proto_code_gen. DO NOT EDIT
// https://github.com/fish-tennis/proto_code_gen
package gen

import (
	. "github.com/fish-tennis/gserver/pb"
)

type ItemNumReader struct {
	v *ItemNum
}

func NewItemNumReader(src *ItemNum) *ItemNumReader {
	return &ItemNumReader{v:src}
}


func (r *ItemNumReader) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ItemNumReader) GetNum() int32 {
	return r.v.GetNum()
}

type ItemCfgReader struct {
	v *ItemCfg
}

func NewItemCfgReader(src *ItemCfg) *ItemCfgReader {
	return &ItemCfgReader{v:src}
}


func (r *ItemCfgReader) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ItemCfgReader) GetName() string {
	return r.v.GetName()
}

func (r *ItemCfgReader) GetDetail() string {
	return r.v.GetDetail()
}

func (r *ItemCfgReader) GetUnique() bool {
	return r.v.GetUnique()
}

type BaseQuestCfgReader struct {
	v *BaseQuestCfg
}

func NewBaseQuestCfgReader(src *BaseQuestCfg) *BaseQuestCfgReader {
	return &BaseQuestCfgReader{v:src}
}


func (r *BaseQuestCfgReader) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *BaseQuestCfgReader) GetName() string {
	return r.v.GetName()
}

func (r *BaseQuestCfgReader) GetDetail() string {
	return r.v.GetDetail()
}

func (r *BaseQuestCfgReader) GetRewards() []*ItemNumReader {
	src := r.v.GetRewards()
	if src == nil {
		return nil
	}
	sliceReader := make([]*ItemNumReader,len(src))
	for i,v := range src {
		sliceReader[i] = NewItemNumReader(v)
	}
	return sliceReader
}

func (r *BaseQuestCfgReader) GetPreQuest() int32 {
	return r.v.GetPreQuest()
}

type BaseConditionCfgReader struct {
	v *BaseConditionCfg
}

func NewBaseConditionCfgReader(src *BaseConditionCfg) *BaseConditionCfgReader {
	return &BaseConditionCfgReader{v:src}
}


func (r *BaseConditionCfgReader) GetType() int32 {
	return r.v.GetType()
}

func (r *BaseConditionCfgReader) GetArg() int32 {
	return r.v.GetArg()
}

func (r *BaseConditionCfgReader) GetOp() string {
	return r.v.GetOp()
}

type BaseProgressCfgReader struct {
	v *BaseProgressCfg
}

func NewBaseProgressCfgReader(src *BaseProgressCfg) *BaseProgressCfgReader {
	return &BaseProgressCfgReader{v:src}
}


func (r *BaseProgressCfgReader) GetType() int32 {
	return r.v.GetType()
}

func (r *BaseProgressCfgReader) GetCountType() int32 {
	return r.v.GetCountType()
}

func (r *BaseProgressCfgReader) GetTotal() int32 {
	return r.v.GetTotal()
}

func (r *BaseProgressCfgReader) GetEvents() []string {
	src := r.v.GetEvents()
	if src == nil {
		return nil
	}
	copySlice := make([]string,len(src))
	copy(copySlice, src)
	return copySlice
}

type BaseActivityCfgReader struct {
	v *BaseActivityCfg
}

func NewBaseActivityCfgReader(src *BaseActivityCfg) *BaseActivityCfgReader {
	return &BaseActivityCfgReader{v:src}
}


func (r *BaseActivityCfgReader) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *BaseActivityCfgReader) GetName() string {
	return r.v.GetName()
}

func (r *BaseActivityCfgReader) GetDetail() string {
	return r.v.GetDetail()
}

func (r *BaseActivityCfgReader) GetTemplate() string {
	return r.v.GetTemplate()
}

func (r *BaseActivityCfgReader) GetRefreshType() int32 {
	return r.v.GetRefreshType()
}

func (r *BaseActivityCfgReader) GetCycleType() int32 {
	return r.v.GetCycleType()
}

func (r *BaseActivityCfgReader) GetTimeType() int32 {
	return r.v.GetTimeType()
}

func (r *BaseActivityCfgReader) GetBeginTime() int32 {
	return r.v.GetBeginTime()
}

func (r *BaseActivityCfgReader) GetEndTime() int32 {
	return r.v.GetEndTime()
}

func (r *BaseActivityCfgReader) GetExchanges() []*ExchangeCfgReader {
	src := r.v.GetExchanges()
	if src == nil {
		return nil
	}
	sliceReader := make([]*ExchangeCfgReader,len(src))
	for i,v := range src {
		sliceReader[i] = NewExchangeCfgReader(v)
	}
	return sliceReader
}

func (r *BaseActivityCfgReader) GetIsOff() bool {
	return r.v.GetIsOff()
}

func (r *BaseActivityCfgReader) GetRemoveDataWhenEnd() bool {
	return r.v.GetRemoveDataWhenEnd()
}

func (r *BaseActivityCfgReader) GetMinPlayerLevel() int32 {
	return r.v.GetMinPlayerLevel()
}

func (r *BaseActivityCfgReader) GetMaxPlayerLevel() int32 {
	return r.v.GetMaxPlayerLevel()
}

type ExchangeCfgReader struct {
	v *ExchangeCfg
}

func NewExchangeCfgReader(src *ExchangeCfg) *ExchangeCfgReader {
	return &ExchangeCfgReader{v:src}
}


func (r *ExchangeCfgReader) GetCfgId() int32 {
	return r.v.GetCfgId()
}

func (r *ExchangeCfgReader) GetConsumeItems() []*ItemNumReader {
	src := r.v.GetConsumeItems()
	if src == nil {
		return nil
	}
	sliceReader := make([]*ItemNumReader,len(src))
	for i,v := range src {
		sliceReader[i] = NewItemNumReader(v)
	}
	return sliceReader
}

func (r *ExchangeCfgReader) GetRewards() []*ItemNumReader {
	src := r.v.GetRewards()
	if src == nil {
		return nil
	}
	sliceReader := make([]*ItemNumReader,len(src))
	for i,v := range src {
		sliceReader[i] = NewItemNumReader(v)
	}
	return sliceReader
}

func (r *ExchangeCfgReader) GetCountLimit() int32 {
	return r.v.GetCountLimit()
}

type LevelExpReader struct {
	v *LevelExp
}

func NewLevelExpReader(src *LevelExp) *LevelExpReader {
	return &LevelExpReader{v:src}
}


func (r *LevelExpReader) GetLevel() int32 {
	return r.v.GetLevel()
}

func (r *LevelExpReader) GetNeedExp() int32 {
	return r.v.GetNeedExp()
}
