// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.19.1
// source: bags.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 背包类型
type BagType int32

const (
	BagType_BagType_None       BagType = 0
	BagType_BagType_CountItem  BagType = 1 // 可叠加的普通物品
	BagType_BagType_UniqueItem BagType = 2 // 不可叠加的普通物品(如带限时属性的普通物品)
	BagType_BagType_Equip      BagType = 3 // 装备
)

// Enum value maps for BagType.
var (
	BagType_name = map[int32]string{
		0: "BagType_None",
		1: "BagType_CountItem",
		2: "BagType_UniqueItem",
		3: "BagType_Equip",
	}
	BagType_value = map[string]int32{
		"BagType_None":       0,
		"BagType_CountItem":  1,
		"BagType_UniqueItem": 2,
		"BagType_Equip":      3,
	}
)

func (x BagType) Enum() *BagType {
	p := new(BagType)
	*p = x
	return p
}

func (x BagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BagType) Descriptor() protoreflect.EnumDescriptor {
	return file_bags_proto_enumTypes[0].Descriptor()
}

func (BagType) Type() protoreflect.EnumType {
	return &file_bags_proto_enumTypes[0]
}

func (x BagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BagType.Descriptor instead.
func (BagType) EnumDescriptor() ([]byte, []int) {
	return file_bags_proto_rawDescGZIP(), []int{0}
}

// 背包物品数据变化类型
type BagItemOpType int32

const (
	BagItemOpType_BagItemOpType_None   BagItemOpType = 0
	BagItemOpType_BagItemOpType_Add    BagItemOpType = 1 // 新加物品
	BagItemOpType_BagItemOpType_Update BagItemOpType = 2 // 更新属性(不可叠加的物品)
	BagItemOpType_BagItemOpType_Delete BagItemOpType = 3 // 删除物品
)

// Enum value maps for BagItemOpType.
var (
	BagItemOpType_name = map[int32]string{
		0: "BagItemOpType_None",
		1: "BagItemOpType_Add",
		2: "BagItemOpType_Update",
		3: "BagItemOpType_Delete",
	}
	BagItemOpType_value = map[string]int32{
		"BagItemOpType_None":   0,
		"BagItemOpType_Add":    1,
		"BagItemOpType_Update": 2,
		"BagItemOpType_Delete": 3,
	}
)

func (x BagItemOpType) Enum() *BagItemOpType {
	p := new(BagItemOpType)
	*p = x
	return p
}

func (x BagItemOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BagItemOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_bags_proto_enumTypes[1].Descriptor()
}

func (BagItemOpType) Type() protoreflect.EnumType {
	return &file_bags_proto_enumTypes[1]
}

func (x BagItemOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BagItemOpType.Descriptor instead.
func (BagItemOpType) EnumDescriptor() ([]byte, []int) {
	return file_bags_proto_rawDescGZIP(), []int{1}
}

// 背包数据同步给客户端
type BagsSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountItem  map[int32]int32            `protobuf:"bytes,1,rep,name=CountItem,proto3" json:"CountItem,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`  // 可叠加的普通物品
	UniqueItem map[int64]*UniqueCountItem `protobuf:"bytes,2,rep,name=UniqueItem,proto3" json:"UniqueItem,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 不可叠加的普通物品
	Equip      map[int64]*Equip           `protobuf:"bytes,3,rep,name=Equip,proto3" json:"Equip,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`           // 装备
}

func (x *BagsSync) Reset() {
	*x = BagsSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bags_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsSync) ProtoMessage() {}

func (x *BagsSync) ProtoReflect() protoreflect.Message {
	mi := &file_bags_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsSync.ProtoReflect.Descriptor instead.
func (*BagsSync) Descriptor() ([]byte, []int) {
	return file_bags_proto_rawDescGZIP(), []int{0}
}

func (x *BagsSync) GetCountItem() map[int32]int32 {
	if x != nil {
		return x.CountItem
	}
	return nil
}

func (x *BagsSync) GetUniqueItem() map[int64]*UniqueCountItem {
	if x != nil {
		return x.UniqueItem
	}
	return nil
}

func (x *BagsSync) GetEquip() map[int64]*Equip {
	if x != nil {
		return x.Equip
	}
	return nil
}

// 背包更新
// 整合不同的背包,不同的操作类型(增加,更新,删除),都统一在一个消息里面
type BagUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemOps []*BagItemOp `protobuf:"bytes,1,rep,name=ItemOps,proto3" json:"ItemOps,omitempty"` // 背包物品数据变化,增加,更新,删除
}

func (x *BagUpdate) Reset() {
	*x = BagUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bags_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagUpdate) ProtoMessage() {}

func (x *BagUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_bags_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagUpdate.ProtoReflect.Descriptor instead.
func (*BagUpdate) Descriptor() ([]byte, []int) {
	return file_bags_proto_rawDescGZIP(), []int{1}
}

func (x *BagUpdate) GetItemOps() []*BagItemOp {
	if x != nil {
		return x.ItemOps
	}
	return nil
}

// 背包物品数据变化
type BagItemOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BagType BagType       `protobuf:"varint,1,opt,name=BagType,proto3,enum=gserver.BagType" json:"BagType,omitempty"`
	OpType  BagItemOpType `protobuf:"varint,2,opt,name=OpType,proto3,enum=gserver.BagItemOpType" json:"OpType,omitempty"`
	// 利用oneof统一不同的物品数据
	//
	// Types that are assignable to BagItem:
	//	*BagItemOp_CountItem
	//	*BagItemOp_UniqueItem
	//	*BagItemOp_Equip
	//	*BagItemOp_UniqueId
	BagItem isBagItemOp_BagItem `protobuf_oneof:"BagItem"`
}

func (x *BagItemOp) Reset() {
	*x = BagItemOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bags_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagItemOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagItemOp) ProtoMessage() {}

func (x *BagItemOp) ProtoReflect() protoreflect.Message {
	mi := &file_bags_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagItemOp.ProtoReflect.Descriptor instead.
func (*BagItemOp) Descriptor() ([]byte, []int) {
	return file_bags_proto_rawDescGZIP(), []int{2}
}

func (x *BagItemOp) GetBagType() BagType {
	if x != nil {
		return x.BagType
	}
	return BagType_BagType_None
}

func (x *BagItemOp) GetOpType() BagItemOpType {
	if x != nil {
		return x.OpType
	}
	return BagItemOpType_BagItemOpType_None
}

func (m *BagItemOp) GetBagItem() isBagItemOp_BagItem {
	if m != nil {
		return m.BagItem
	}
	return nil
}

func (x *BagItemOp) GetCountItem() *ItemNum {
	if x, ok := x.GetBagItem().(*BagItemOp_CountItem); ok {
		return x.CountItem
	}
	return nil
}

func (x *BagItemOp) GetUniqueItem() *UniqueCountItem {
	if x, ok := x.GetBagItem().(*BagItemOp_UniqueItem); ok {
		return x.UniqueItem
	}
	return nil
}

func (x *BagItemOp) GetEquip() *Equip {
	if x, ok := x.GetBagItem().(*BagItemOp_Equip); ok {
		return x.Equip
	}
	return nil
}

func (x *BagItemOp) GetUniqueId() int64 {
	if x, ok := x.GetBagItem().(*BagItemOp_UniqueId); ok {
		return x.UniqueId
	}
	return 0
}

type isBagItemOp_BagItem interface {
	isBagItemOp_BagItem()
}

type BagItemOp_CountItem struct {
	CountItem *ItemNum `protobuf:"bytes,3,opt,name=CountItem,proto3,oneof"` // 可叠加的普通物品(增加,删除)
}

type BagItemOp_UniqueItem struct {
	UniqueItem *UniqueCountItem `protobuf:"bytes,4,opt,name=UniqueItem,proto3,oneof"` // 不可叠加的普通物品(增加,更新)
}

type BagItemOp_Equip struct {
	Equip *Equip `protobuf:"bytes,5,opt,name=Equip,proto3,oneof"` // 装备(增加,更新)
}

type BagItemOp_UniqueId struct {
	UniqueId int64 `protobuf:"varint,6,opt,name=UniqueId,proto3,oneof"` // 不可叠加的物品的唯一id(删除)
}

func (*BagItemOp_CountItem) isBagItemOp_BagItem() {}

func (*BagItemOp_UniqueItem) isBagItemOp_BagItem() {}

func (*BagItemOp_Equip) isBagItemOp_BagItem() {}

func (*BagItemOp_UniqueId) isBagItemOp_BagItem() {}

var File_bags_proto protoreflect.FileDescriptor

var file_bags_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x09, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x03, 0x0a,
	0x08, 0x42, 0x61, 0x67, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3e, 0x0a, 0x09, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x0a, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x53, 0x79, 0x6e, 0x63,
	0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x05,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57,
	0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x39, 0x0a, 0x09, 0x42, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x4f, 0x70, 0x52, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x73, 0x22, 0xa6, 0x02, 0x0a,
	0x09, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x42, 0x61,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x42,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x48, 0x00, 0x52, 0x05, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x08,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x08, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x42, 0x61,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x2a, 0x5d, 0x0a, 0x07, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x0d, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41,
	0x64, 0x64, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bags_proto_rawDescOnce sync.Once
	file_bags_proto_rawDescData = file_bags_proto_rawDesc
)

func file_bags_proto_rawDescGZIP() []byte {
	file_bags_proto_rawDescOnce.Do(func() {
		file_bags_proto_rawDescData = protoimpl.X.CompressGZIP(file_bags_proto_rawDescData)
	})
	return file_bags_proto_rawDescData
}

var file_bags_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bags_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_bags_proto_goTypes = []interface{}{
	(BagType)(0),            // 0: gserver.BagType
	(BagItemOpType)(0),      // 1: gserver.BagItemOpType
	(*BagsSync)(nil),        // 2: gserver.BagsSync
	(*BagUpdate)(nil),       // 3: gserver.BagUpdate
	(*BagItemOp)(nil),       // 4: gserver.BagItemOp
	nil,                     // 5: gserver.BagsSync.CountItemEntry
	nil,                     // 6: gserver.BagsSync.UniqueItemEntry
	nil,                     // 7: gserver.BagsSync.EquipEntry
	(*ItemNum)(nil),         // 8: gserver.ItemNum
	(*UniqueCountItem)(nil), // 9: gserver.UniqueCountItem
	(*Equip)(nil),           // 10: gserver.Equip
}
var file_bags_proto_depIdxs = []int32{
	5,  // 0: gserver.BagsSync.CountItem:type_name -> gserver.BagsSync.CountItemEntry
	6,  // 1: gserver.BagsSync.UniqueItem:type_name -> gserver.BagsSync.UniqueItemEntry
	7,  // 2: gserver.BagsSync.Equip:type_name -> gserver.BagsSync.EquipEntry
	4,  // 3: gserver.BagUpdate.ItemOps:type_name -> gserver.BagItemOp
	0,  // 4: gserver.BagItemOp.BagType:type_name -> gserver.BagType
	1,  // 5: gserver.BagItemOp.OpType:type_name -> gserver.BagItemOpType
	8,  // 6: gserver.BagItemOp.CountItem:type_name -> gserver.ItemNum
	9,  // 7: gserver.BagItemOp.UniqueItem:type_name -> gserver.UniqueCountItem
	10, // 8: gserver.BagItemOp.Equip:type_name -> gserver.Equip
	9,  // 9: gserver.BagsSync.UniqueItemEntry.value:type_name -> gserver.UniqueCountItem
	10, // 10: gserver.BagsSync.EquipEntry.value:type_name -> gserver.Equip
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_bags_proto_init() }
func file_bags_proto_init() {
	if File_bags_proto != nil {
		return
	}
	file_cfg_proto_init()
	file_item_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bags_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bags_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bags_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagItemOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bags_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*BagItemOp_CountItem)(nil),
		(*BagItemOp_UniqueItem)(nil),
		(*BagItemOp_Equip)(nil),
		(*BagItemOp_UniqueId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bags_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bags_proto_goTypes,
		DependencyIndexes: file_bags_proto_depIdxs,
		EnumInfos:         file_bags_proto_enumTypes,
		MessageInfos:      file_bags_proto_msgTypes,
	}.Build()
	File_bags_proto = out.File
	file_bags_proto_rawDesc = nil
	file_bags_proto_goTypes = nil
	file_bags_proto_depIdxs = nil
}
