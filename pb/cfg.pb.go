// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.19.1
// source: cfg.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Color int32

const (
	Color_Color_None   Color = 0
	Color_Color_Red    Color = 1
	Color_Color_Green  Color = 2
	Color_Color_Blue   Color = 3
	Color_Color_Yellow Color = 4
	Color_Color_Gray   Color = 5
)

// Enum value maps for Color.
var (
	Color_name = map[int32]string{
		0: "Color_None",
		1: "Color_Red",
		2: "Color_Green",
		3: "Color_Blue",
		4: "Color_Yellow",
		5: "Color_Gray",
	}
	Color_value = map[string]int32{
		"Color_None":   0,
		"Color_Red":    1,
		"Color_Green":  2,
		"Color_Blue":   3,
		"Color_Yellow": 4,
		"Color_Gray":   5,
	}
)

func (x Color) Enum() *Color {
	p := new(Color)
	*p = x
	return p
}

func (x Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Color) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[0].Descriptor()
}

func (Color) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[0]
}

func (x Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Color.Descriptor instead.
func (Color) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{0}
}

// 刷新方式
type RefreshType int32

const (
	RefreshType_RefreshType_None RefreshType = 0 // 解决"The first enum value must be zero in proto3."的报错
	RefreshType_RefreshType_Day  RefreshType = 1 // 每日重置
)

// Enum value maps for RefreshType.
var (
	RefreshType_name = map[int32]string{
		0: "RefreshType_None",
		1: "RefreshType_Day",
	}
	RefreshType_value = map[string]int32{
		"RefreshType_None": 0,
		"RefreshType_Day":  1,
	}
)

func (x RefreshType) Enum() *RefreshType {
	p := new(RefreshType)
	*p = x
	return p
}

func (x RefreshType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefreshType) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[1].Descriptor()
}

func (RefreshType) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[1]
}

func (x RefreshType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefreshType.Descriptor instead.
func (RefreshType) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{1}
}

// 时间类型
type TimeType int32

const (
	TimeType_TimeType_None      TimeType = 0
	TimeType_TimeType_Timestamp TimeType = 1 // 时间戳
	TimeType_TimeType_Date      TimeType = 2 // 日期(格式:20240219)
)

// Enum value maps for TimeType.
var (
	TimeType_name = map[int32]string{
		0: "TimeType_None",
		1: "TimeType_Timestamp",
		2: "TimeType_Date",
	}
	TimeType_value = map[string]int32{
		"TimeType_None":      0,
		"TimeType_Timestamp": 1,
		"TimeType_Date":      2,
	}
)

func (x TimeType) Enum() *TimeType {
	p := new(TimeType)
	*p = x
	return p
}

func (x TimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[2].Descriptor()
}

func (TimeType) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[2]
}

func (x TimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeType.Descriptor instead.
func (TimeType) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{2}
}

// 物品类型
type ItemType int32

const (
	ItemType_ItemType_None  ItemType = 0 // 普通物品
	ItemType_ItemType_Equip ItemType = 1 // 装备
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ItemType_None",
		1: "ItemType_Equip",
	}
	ItemType_value = map[string]int32{
		"ItemType_None":  0,
		"ItemType_Equip": 1,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[3].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[3]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{3}
}

// 物品子类
type ItemSubType int32

const (
	ItemSubType_ItemSubType_None ItemSubType = 0
	ItemSubType_ItemSubType_Gold ItemSubType = 1 // 金币
	ItemSubType_ItemSubType_Exp  ItemSubType = 2 // 经验丹
)

// Enum value maps for ItemSubType.
var (
	ItemSubType_name = map[int32]string{
		0: "ItemSubType_None",
		1: "ItemSubType_Gold",
		2: "ItemSubType_Exp",
	}
	ItemSubType_value = map[string]int32{
		"ItemSubType_None": 0,
		"ItemSubType_Gold": 1,
		"ItemSubType_Exp":  2,
	}
)

func (x ItemSubType) Enum() *ItemSubType {
	p := new(ItemSubType)
	*p = x
	return p
}

func (x ItemSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[4].Descriptor()
}

func (ItemSubType) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[4]
}

func (x ItemSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemSubType.Descriptor instead.
func (ItemSubType) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{4}
}

// 物品分类
type ItemCategory int32

const (
	ItemCategory_ItemCategory_None ItemCategory = 0
)

// Enum value maps for ItemCategory.
var (
	ItemCategory_name = map[int32]string{
		0: "ItemCategory_None",
	}
	ItemCategory_value = map[string]int32{
		"ItemCategory_None": 0,
	}
)

func (x ItemCategory) Enum() *ItemCategory {
	p := new(ItemCategory)
	*p = x
	return p
}

func (x ItemCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[5].Descriptor()
}

func (ItemCategory) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[5]
}

func (x ItemCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemCategory.Descriptor instead.
func (ItemCategory) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{5}
}

// 物品显示类型
type ItemViewType int32

const (
	ItemViewType_ItemViewType_None ItemViewType = 0
	ItemViewType_ItemViewType_Hide ItemViewType = 1 // 隐藏,不显示在背包中,不占背包格子
)

// Enum value maps for ItemViewType.
var (
	ItemViewType_name = map[int32]string{
		0: "ItemViewType_None",
		1: "ItemViewType_Hide",
	}
	ItemViewType_value = map[string]int32{
		"ItemViewType_None": 0,
		"ItemViewType_Hide": 1,
	}
)

func (x ItemViewType) Enum() *ItemViewType {
	p := new(ItemViewType)
	*p = x
	return p
}

func (x ItemViewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemViewType) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[6].Descriptor()
}

func (ItemViewType) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[6]
}

func (x ItemViewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemViewType.Descriptor instead.
func (ItemViewType) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{6}
}

// 任务类型 (NOTE:根据项目实际需求,自行调整)
type QuestType int32

const (
	QuestType_QuestType_None        QuestType = 0
	QuestType_QuestType_SubQuest    QuestType = 1 // 其他系统的子任务(如活动的子任务)
	QuestType_QuestType_Achievement QuestType = 2 // 成就
)

// Enum value maps for QuestType.
var (
	QuestType_name = map[int32]string{
		0: "QuestType_None",
		1: "QuestType_SubQuest",
		2: "QuestType_Achievement",
	}
	QuestType_value = map[string]int32{
		"QuestType_None":        0,
		"QuestType_SubQuest":    1,
		"QuestType_Achievement": 2,
	}
)

func (x QuestType) Enum() *QuestType {
	p := new(QuestType)
	*p = x
	return p
}

func (x QuestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestType) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[7].Descriptor()
}

func (QuestType) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[7]
}

func (x QuestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestType.Descriptor instead.
func (QuestType) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{7}
}

// 任务分类 (NOTE:根据项目实际需求,自行调整)
type QuestCategory int32

const (
	QuestCategory_QuestCategory_None QuestCategory = 0
)

// Enum value maps for QuestCategory.
var (
	QuestCategory_name = map[int32]string{
		0: "QuestCategory_None",
	}
	QuestCategory_value = map[string]int32{
		"QuestCategory_None": 0,
	}
)

func (x QuestCategory) Enum() *QuestCategory {
	p := new(QuestCategory)
	*p = x
	return p
}

func (x QuestCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[8].Descriptor()
}

func (QuestCategory) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[8]
}

func (x QuestCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestCategory.Descriptor instead.
func (QuestCategory) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{8}
}

// 兑换分类
type ExchangeCategory int32

const (
	ExchangeCategory_ExchangeCategory_None ExchangeCategory = 0
	ExchangeCategory_ExchangeCategory_Shop ExchangeCategory = 1 // 商店
)

// Enum value maps for ExchangeCategory.
var (
	ExchangeCategory_name = map[int32]string{
		0: "ExchangeCategory_None",
		1: "ExchangeCategory_Shop",
	}
	ExchangeCategory_value = map[string]int32{
		"ExchangeCategory_None": 0,
		"ExchangeCategory_Shop": 1,
	}
)

func (x ExchangeCategory) Enum() *ExchangeCategory {
	p := new(ExchangeCategory)
	*p = x
	return p
}

func (x ExchangeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_cfg_proto_enumTypes[9].Descriptor()
}

func (ExchangeCategory) Type() protoreflect.EnumType {
	return &file_cfg_proto_enumTypes[9]
}

func (x ExchangeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeCategory.Descriptor instead.
func (ExchangeCategory) EnumDescriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{9}
}

// 物品数量
type ItemNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId int32 `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"` // 物品配置id
	Num   int32 `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`     // 物品数量
}

func (x *ItemNum) Reset() {
	*x = ItemNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemNum) ProtoMessage() {}

func (x *ItemNum) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemNum.ProtoReflect.Descriptor instead.
func (*ItemNum) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{0}
}

func (x *ItemNum) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *ItemNum) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// Id和数量
type IdCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"` // 数量
}

func (x *IdCount) Reset() {
	*x = IdCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdCount) ProtoMessage() {}

func (x *IdCount) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdCount.ProtoReflect.Descriptor instead.
func (*IdCount) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{1}
}

func (x *IdCount) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 物品配置
type ItemCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId      int32             `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Detail     string            `protobuf:"bytes,3,opt,name=Detail,proto3" json:"Detail,omitempty"`
	ItemType   int32             `protobuf:"varint,4,opt,name=ItemType,proto3" json:"ItemType,omitempty"`                                                                                             // 物品类型(enum ItemType)
	SubType    int32             `protobuf:"varint,5,opt,name=SubType,proto3" json:"SubType,omitempty"`                                                                                               // 物品子类(enum ItemSubType)
	Category   int32             `protobuf:"varint,6,opt,name=Category,proto3" json:"Category,omitempty"`                                                                                             // 物品分类(enum ItemCategory)
	Arg        int32             `protobuf:"varint,7,opt,name=Arg,proto3" json:"Arg,omitempty"`                                                                                                       // 参数(比如ItemSubType=ItemSubType_Exp是,表示加经验的数值)
	TimeType   int32             `protobuf:"varint,8,opt,name=TimeType,proto3" json:"TimeType,omitempty"`                                                                                             // 限时道具的时间类型(enum TimeType)
	Timeout    int32             `protobuf:"varint,9,opt,name=Timeout,proto3" json:"Timeout,omitempty"`                                                                                               // 限时道具的时限
	ViewType   int32             `protobuf:"varint,10,opt,name=ViewType,proto3" json:"ViewType,omitempty"`                                                                                            // 物品显示类型(enum ItemViewType)
	Properties map[string]string `protobuf:"bytes,11,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展属性
	Icon       string            `protobuf:"bytes,12,opt,name=Icon,proto3" json:"Icon,omitempty"`                                                                                                     // 物品图标(客户端使用)
}

func (x *ItemCfg) Reset() {
	*x = ItemCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemCfg) ProtoMessage() {}

func (x *ItemCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemCfg.ProtoReflect.Descriptor instead.
func (*ItemCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{2}
}

func (x *ItemCfg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *ItemCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemCfg) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ItemCfg) GetItemType() int32 {
	if x != nil {
		return x.ItemType
	}
	return 0
}

func (x *ItemCfg) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *ItemCfg) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *ItemCfg) GetArg() int32 {
	if x != nil {
		return x.Arg
	}
	return 0
}

func (x *ItemCfg) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *ItemCfg) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ItemCfg) GetViewType() int32 {
	if x != nil {
		return x.ViewType
	}
	return 0
}

func (x *ItemCfg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ItemCfg) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// 添加元素参数
type AddElemArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId      int32             `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"`                                                                                                  // 配置id
	Num        int32             `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`                                                                                                      // 数量
	TimeType   int32             `protobuf:"varint,3,opt,name=TimeType,proto3" json:"TimeType,omitempty"`                                                                                            // 时间类型(enum TimeType)
	Timeout    int32             `protobuf:"varint,4,opt,name=Timeout,proto3" json:"Timeout,omitempty"`                                                                                              // 结束时间
	Source     int32             `protobuf:"varint,5,opt,name=Source,proto3" json:"Source,omitempty"`                                                                                                // 来源(一般用于数据分析)
	Properties map[string]string `protobuf:"bytes,6,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展属性
}

func (x *AddElemArg) Reset() {
	*x = AddElemArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddElemArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddElemArg) ProtoMessage() {}

func (x *AddElemArg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddElemArg.ProtoReflect.Descriptor instead.
func (*AddElemArg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{3}
}

func (x *AddElemArg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *AddElemArg) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *AddElemArg) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *AddElemArg) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *AddElemArg) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *AddElemArg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// 删除元素参数
type DelElemArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId   int64             `protobuf:"varint,1,opt,name=UniqueId,proto3" json:"UniqueId,omitempty"`                                                                                            // 唯一id(删除指定的不可叠加的元素才需要)
	CfgId      int32             `protobuf:"varint,2,opt,name=CfgId,proto3" json:"CfgId,omitempty"`                                                                                                  // 配置id
	Num        int32             `protobuf:"varint,3,opt,name=Num,proto3" json:"Num,omitempty"`                                                                                                      // 数量
	Source     int32             `protobuf:"varint,4,opt,name=Source,proto3" json:"Source,omitempty"`                                                                                                // 来源(一般用于数据分析)
	Properties map[string]string `protobuf:"bytes,5,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展属性
}

func (x *DelElemArg) Reset() {
	*x = DelElemArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelElemArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelElemArg) ProtoMessage() {}

func (x *DelElemArg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelElemArg.ProtoReflect.Descriptor instead.
func (*DelElemArg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{4}
}

func (x *DelElemArg) GetUniqueId() int64 {
	if x != nil {
		return x.UniqueId
	}
	return 0
}

func (x *DelElemArg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *DelElemArg) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *DelElemArg) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *DelElemArg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// CfgId + Arg
type CfgArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId int32 `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"` // 配置id
	Arg   int32 `protobuf:"varint,2,opt,name=Arg,proto3" json:"Arg,omitempty"`     // 单个参数
}

func (x *CfgArg) Reset() {
	*x = CfgArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CfgArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CfgArg) ProtoMessage() {}

func (x *CfgArg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CfgArg.ProtoReflect.Descriptor instead.
func (*CfgArg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{5}
}

func (x *CfgArg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *CfgArg) GetArg() int32 {
	if x != nil {
		return x.Arg
	}
	return 0
}

// CfgId + Args
type CfgArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId int32   `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"`      // 配置id
	Args  []int32 `protobuf:"varint,2,rep,packed,name=Args,proto3" json:"Args,omitempty"` // 参数数组
}

func (x *CfgArgs) Reset() {
	*x = CfgArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CfgArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CfgArgs) ProtoMessage() {}

func (x *CfgArgs) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CfgArgs.ProtoReflect.Descriptor instead.
func (*CfgArgs) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{6}
}

func (x *CfgArgs) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *CfgArgs) GetArgs() []int32 {
	if x != nil {
		return x.Args
	}
	return nil
}

// 任务配置
type QuestCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId              int32             `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"`
	Name               string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	QuestType          int32             `protobuf:"varint,3,opt,name=QuestType,proto3" json:"QuestType,omitempty"`                                                                                           // 任务类型(enum QuestType)
	RefreshType        int32             `protobuf:"varint,4,opt,name=RefreshType,proto3" json:"RefreshType,omitempty"`                                                                                       // 刷新机制(enum RefreshType)
	Category           int32             `protobuf:"varint,5,opt,name=Category,proto3" json:"Category,omitempty"`                                                                                             // 任务分类(enum QuestCategory)
	Rewards            []*AddElemArg     `protobuf:"bytes,6,rep,name=Rewards,proto3" json:"Rewards,omitempty"`                                                                                                // 任务奖励
	PreQuest           int32             `protobuf:"varint,7,opt,name=PreQuest,proto3" json:"PreQuest,omitempty"`                                                                                             // 前置任务
	NextQuests         []int32           `protobuf:"varint,8,rep,packed,name=NextQuests,proto3" json:"NextQuests,omitempty"`                                                                                  // 完成该任务后,自动接后续的任务(任务链)
	Conditions         []*ConditionCfg   `protobuf:"bytes,9,rep,name=Conditions,proto3" json:"Conditions,omitempty"`                                                                                          // 任务条件
	Progress           *ProgressCfg      `protobuf:"bytes,10,opt,name=Progress,proto3" json:"Progress,omitempty"`                                                                                             // 任务进度
	Properties         map[string]string `protobuf:"bytes,11,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展属性
	Detail             string            `protobuf:"bytes,12,opt,name=Detail,proto3" json:"Detail,omitempty"`                                                                                                 // 任务描述
	PlayerLevel        int32             `protobuf:"varint,13,opt,name=PlayerLevel,proto3" json:"PlayerLevel,omitempty"`                                                                                      // 玩家等级限制(0表示不限制)
	ConditionTemplates []*CfgArgs        `protobuf:"bytes,21,rep,name=ConditionTemplates,proto3" json:"ConditionTemplates,omitempty"`                                                                         // 关联的配置模板id和参数,简化配置表用,业务代码不要调用
	ProgressTemplate   *CfgArg           `protobuf:"bytes,22,opt,name=ProgressTemplate,proto3" json:"ProgressTemplate,omitempty"`                                                                             // 关联的配置模板id和参数,简化配置表用,业务代码不要调用
}

func (x *QuestCfg) Reset() {
	*x = QuestCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestCfg) ProtoMessage() {}

func (x *QuestCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestCfg.ProtoReflect.Descriptor instead.
func (*QuestCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{7}
}

func (x *QuestCfg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *QuestCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuestCfg) GetQuestType() int32 {
	if x != nil {
		return x.QuestType
	}
	return 0
}

func (x *QuestCfg) GetRefreshType() int32 {
	if x != nil {
		return x.RefreshType
	}
	return 0
}

func (x *QuestCfg) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *QuestCfg) GetRewards() []*AddElemArg {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *QuestCfg) GetPreQuest() int32 {
	if x != nil {
		return x.PreQuest
	}
	return 0
}

func (x *QuestCfg) GetNextQuests() []int32 {
	if x != nil {
		return x.NextQuests
	}
	return nil
}

func (x *QuestCfg) GetConditions() []*ConditionCfg {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *QuestCfg) GetProgress() *ProgressCfg {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *QuestCfg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *QuestCfg) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *QuestCfg) GetPlayerLevel() int32 {
	if x != nil {
		return x.PlayerLevel
	}
	return 0
}

func (x *QuestCfg) GetConditionTemplates() []*CfgArgs {
	if x != nil {
		return x.ConditionTemplates
	}
	return nil
}

func (x *QuestCfg) GetProgressTemplate() *CfgArg {
	if x != nil {
		return x.ProgressTemplate
	}
	return nil
}

// 数值比较配置
type ValueCompareCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     string  `protobuf:"bytes,1,opt,name=Op,proto3" json:"Op,omitempty"`                 // 操作符 = > >= < <= != [] ![]
	Values []int32 `protobuf:"varint,2,rep,packed,name=Values,proto3" json:"Values,omitempty"` // 比较的值(可配多个)
}

func (x *ValueCompareCfg) Reset() {
	*x = ValueCompareCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueCompareCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueCompareCfg) ProtoMessage() {}

func (x *ValueCompareCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueCompareCfg.ProtoReflect.Descriptor instead.
func (*ValueCompareCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{8}
}

func (x *ValueCompareCfg) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *ValueCompareCfg) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 条件配置(ConditionTemplateCfg + Values)
type ConditionCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        int32             `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`                                                                                                    // 条件类型(enum ConditionType)
	Key         string            `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`                                                                                                       // 关键字,如ConditionType_PlayerPropertyCompare对应的属性名
	Op          string            `protobuf:"bytes,3,opt,name=Op,proto3" json:"Op,omitempty"`                                                                                                         // 操作符 = > >= < <= != [] ![]
	Values      []int32           `protobuf:"varint,4,rep,packed,name=Values,proto3" json:"Values,omitempty"`                                                                                         // 比较的值(可配多个)
	Properties  map[string]string `protobuf:"bytes,5,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展属性
	ClientCheck bool              `protobuf:"varint,6,opt,name=ClientCheck,proto3" json:"ClientCheck,omitempty"`                                                                                      // 客户端是否可以直接判断条件,比如玩家的等级
}

func (x *ConditionCfg) Reset() {
	*x = ConditionCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionCfg) ProtoMessage() {}

func (x *ConditionCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionCfg.ProtoReflect.Descriptor instead.
func (*ConditionCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{9}
}

func (x *ConditionCfg) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConditionCfg) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConditionCfg) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *ConditionCfg) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ConditionCfg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ConditionCfg) GetClientCheck() bool {
	if x != nil {
		return x.ClientCheck
	}
	return false
}

// 条件模板配置
type ConditionTemplateCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId       int32             `protobuf:"varint,4,opt,name=CfgId,proto3" json:"CfgId,omitempty"`                                                                                                  // 配置id
	Type        int32             `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`                                                                                                    // 条件类型(enum ConditionType)
	Key         string            `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`                                                                                                       // 关键字,如ConditionType_PlayerPropertyCompare对应的属性名
	Op          string            `protobuf:"bytes,3,opt,name=Op,proto3" json:"Op,omitempty"`                                                                                                         // 操作符 = > >= < <= != [] ![]
	Properties  map[string]string `protobuf:"bytes,5,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展属性
	ClientCheck bool              `protobuf:"varint,6,opt,name=ClientCheck,proto3" json:"ClientCheck,omitempty"`                                                                                      // 客户端是否可以直接判断条件,比如玩家的等级
}

func (x *ConditionTemplateCfg) Reset() {
	*x = ConditionTemplateCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionTemplateCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionTemplateCfg) ProtoMessage() {}

func (x *ConditionTemplateCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionTemplateCfg.ProtoReflect.Descriptor instead.
func (*ConditionTemplateCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{10}
}

func (x *ConditionTemplateCfg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *ConditionTemplateCfg) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConditionTemplateCfg) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConditionTemplateCfg) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *ConditionTemplateCfg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ConditionTemplateCfg) GetClientCheck() bool {
	if x != nil {
		return x.ClientCheck
	}
	return false
}

// 进度配置(ProgressTemplateCfg + Total)
type ProgressCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              int32                       `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`                                                                                                                  // 进度类型(enum ProgressType)
	Total             int32                       `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`                                                                                                                // 总进度要求
	NeedInit          bool                        `protobuf:"varint,3,opt,name=NeedInit,proto3" json:"NeedInit,omitempty"`                                                                                                          // 接任务时,是否初始化一下当前进度
	Event             string                      `protobuf:"bytes,4,opt,name=Event,proto3" json:"Event,omitempty"`                                                                                                                 // 关联的事件名
	ProgressField     string                      `protobuf:"bytes,5,opt,name=ProgressField,proto3" json:"ProgressField,omitempty"`                                                                                                 // 以事件字段值作为进度值,为空表示进度值是1
	IntEventFields    map[string]*ValueCompareCfg `protobuf:"bytes,6,rep,name=IntEventFields,proto3" json:"IntEventFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // 数值类型的事件字段值(支持复杂的比较操作符)
	StringEventFields map[string]string           `protobuf:"bytes,7,rep,name=StringEventFields,proto3" json:"StringEventFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 事件字段值(字符串形式)
	Properties        map[string]string           `protobuf:"bytes,8,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               // 扩展属性
}

func (x *ProgressCfg) Reset() {
	*x = ProgressCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressCfg) ProtoMessage() {}

func (x *ProgressCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressCfg.ProtoReflect.Descriptor instead.
func (*ProgressCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{11}
}

func (x *ProgressCfg) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProgressCfg) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProgressCfg) GetNeedInit() bool {
	if x != nil {
		return x.NeedInit
	}
	return false
}

func (x *ProgressCfg) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *ProgressCfg) GetProgressField() string {
	if x != nil {
		return x.ProgressField
	}
	return ""
}

func (x *ProgressCfg) GetIntEventFields() map[string]*ValueCompareCfg {
	if x != nil {
		return x.IntEventFields
	}
	return nil
}

func (x *ProgressCfg) GetStringEventFields() map[string]string {
	if x != nil {
		return x.StringEventFields
	}
	return nil
}

func (x *ProgressCfg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// 进度模板配置
type ProgressTemplateCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId             int32                       `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"`                                                                                                                // 配置id
	Type              int32                       `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`                                                                                                                  // 进度类型(enum ProgressType)
	NeedInit          bool                        `protobuf:"varint,3,opt,name=NeedInit,proto3" json:"NeedInit,omitempty"`                                                                                                          // 接任务时,是否初始化一下当前进度
	Event             string                      `protobuf:"bytes,4,opt,name=Event,proto3" json:"Event,omitempty"`                                                                                                                 // 关联的事件名
	ProgressField     string                      `protobuf:"bytes,5,opt,name=ProgressField,proto3" json:"ProgressField,omitempty"`                                                                                                 // 以事件字段值作为进度值,为空表示进度值是1
	IntEventFields    map[string]*ValueCompareCfg `protobuf:"bytes,6,rep,name=IntEventFields,proto3" json:"IntEventFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // 数值类型的事件字段值(支持复杂的比较操作符)
	StringEventFields map[string]string           `protobuf:"bytes,7,rep,name=StringEventFields,proto3" json:"StringEventFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 事件字段值(字符串形式)
	Properties        map[string]string           `protobuf:"bytes,8,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               // 扩展属性
}

func (x *ProgressTemplateCfg) Reset() {
	*x = ProgressTemplateCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressTemplateCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressTemplateCfg) ProtoMessage() {}

func (x *ProgressTemplateCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressTemplateCfg.ProtoReflect.Descriptor instead.
func (*ProgressTemplateCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{12}
}

func (x *ProgressTemplateCfg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *ProgressTemplateCfg) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProgressTemplateCfg) GetNeedInit() bool {
	if x != nil {
		return x.NeedInit
	}
	return false
}

func (x *ProgressTemplateCfg) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *ProgressTemplateCfg) GetProgressField() string {
	if x != nil {
		return x.ProgressField
	}
	return ""
}

func (x *ProgressTemplateCfg) GetIntEventFields() map[string]*ValueCompareCfg {
	if x != nil {
		return x.IntEventFields
	}
	return nil
}

func (x *ProgressTemplateCfg) GetStringEventFields() map[string]string {
	if x != nil {
		return x.StringEventFields
	}
	return nil
}

func (x *ProgressTemplateCfg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// 兑换配置
type ExchangeCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId              int32             `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"`
	Conditions         []*ConditionCfg   `protobuf:"bytes,2,rep,name=Conditions,proto3" json:"Conditions,omitempty"`                                                                                         // 兑换条件
	Consumes           []*DelElemArg     `protobuf:"bytes,3,rep,name=Consumes,proto3" json:"Consumes,omitempty"`                                                                                             // 需要消耗的物品
	Rewards            []*AddElemArg     `protobuf:"bytes,4,rep,name=Rewards,proto3" json:"Rewards,omitempty"`                                                                                               // 获得物品
	CountLimit         int32             `protobuf:"varint,5,opt,name=CountLimit,proto3" json:"CountLimit,omitempty"`                                                                                        // 兑换次数限制(0表示无次数限制)
	RefreshType        int32             `protobuf:"varint,6,opt,name=RefreshType,proto3" json:"RefreshType,omitempty"`                                                                                      // 刷新机制(enum RefreshType)
	Category           int32             `protobuf:"varint,7,opt,name=Category,proto3" json:"Category,omitempty"`                                                                                            // 兑换分类(enum ExchangeCategory)
	Properties         map[string]string `protobuf:"bytes,8,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展属性
	Detail             string            `protobuf:"bytes,9,opt,name=Detail,proto3" json:"Detail,omitempty"`
	Icon               string            `protobuf:"bytes,10,opt,name=Icon,proto3" json:"Icon,omitempty"`                             // 图标(客户端使用)
	ConditionTemplates []*CfgArgs        `protobuf:"bytes,21,rep,name=ConditionTemplates,proto3" json:"ConditionTemplates,omitempty"` // 关联的配置模板id和参数,简化配置表用,业务代码不要调用
}

func (x *ExchangeCfg) Reset() {
	*x = ExchangeCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCfg) ProtoMessage() {}

func (x *ExchangeCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCfg.ProtoReflect.Descriptor instead.
func (*ExchangeCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{13}
}

func (x *ExchangeCfg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *ExchangeCfg) GetConditions() []*ConditionCfg {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ExchangeCfg) GetConsumes() []*DelElemArg {
	if x != nil {
		return x.Consumes
	}
	return nil
}

func (x *ExchangeCfg) GetRewards() []*AddElemArg {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *ExchangeCfg) GetCountLimit() int32 {
	if x != nil {
		return x.CountLimit
	}
	return 0
}

func (x *ExchangeCfg) GetRefreshType() int32 {
	if x != nil {
		return x.RefreshType
	}
	return 0
}

func (x *ExchangeCfg) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *ExchangeCfg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ExchangeCfg) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ExchangeCfg) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ExchangeCfg) GetConditionTemplates() []*CfgArgs {
	if x != nil {
		return x.ConditionTemplates
	}
	return nil
}

// 活动基础配置
type ActivityCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId             int32             `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"`
	Name              string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Detail            string            `protobuf:"bytes,3,opt,name=Detail,proto3" json:"Detail,omitempty"`
	Template          string            `protobuf:"bytes,4,opt,name=Template,proto3" json:"Template,omitempty"`                                                                                              // 活动模板名
	RefreshType       int32             `protobuf:"varint,5,opt,name=RefreshType,proto3" json:"RefreshType,omitempty"`                                                                                       // 刷新机制(enum RefreshType)
	CycleType         int32             `protobuf:"varint,6,opt,name=CycleType,proto3" json:"CycleType,omitempty"`                                                                                           // 活动周期类型
	TimeType          int32             `protobuf:"varint,7,opt,name=TimeType,proto3" json:"TimeType,omitempty"`                                                                                             // 时间类型(enum TimeType)
	BeginTime         int32             `protobuf:"varint,8,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`                                                                                           // 开始时间(TimeType为TimeType_Timestamp时,格式是时间戳 TimeType为TimeType_Date时,格式是20240219)
	EndTime           int32             `protobuf:"varint,9,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                                                                                               // 结束时间(TimeType为TimeType_Timestamp时,格式是时间戳 TimeType为TimeType_Date时,格式是20240219)
	ExchangeIds       []int32           `protobuf:"varint,10,rep,packed,name=ExchangeIds,proto3" json:"ExchangeIds,omitempty"`                                                                               // 兑换配置
	IsOff             bool              `protobuf:"varint,11,opt,name=IsOff,proto3" json:"IsOff,omitempty"`                                                                                                  // 是否关闭
	RemoveDataWhenEnd bool              `protobuf:"varint,12,opt,name=RemoveDataWhenEnd,proto3" json:"RemoveDataWhenEnd,omitempty"`                                                                          // 活动结束时,是否删除活动数据
	MinPlayerLevel    int32             `protobuf:"varint,14,opt,name=MinPlayerLevel,proto3" json:"MinPlayerLevel,omitempty"`                                                                                // 参与活动的最低玩家等级要求(0表示不限制)
	MaxPlayerLevel    int32             `protobuf:"varint,15,opt,name=MaxPlayerLevel,proto3" json:"MaxPlayerLevel,omitempty"`                                                                                // 参与活动的最大玩家等级上限(0表示不限制)
	QuestIds          []int32           `protobuf:"varint,16,rep,packed,name=QuestIds,proto3" json:"QuestIds,omitempty"`                                                                                     // 活动子任务id
	Properties        map[string]string `protobuf:"bytes,17,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展属性
}

func (x *ActivityCfg) Reset() {
	*x = ActivityCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityCfg) ProtoMessage() {}

func (x *ActivityCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityCfg.ProtoReflect.Descriptor instead.
func (*ActivityCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{14}
}

func (x *ActivityCfg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *ActivityCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivityCfg) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ActivityCfg) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *ActivityCfg) GetRefreshType() int32 {
	if x != nil {
		return x.RefreshType
	}
	return 0
}

func (x *ActivityCfg) GetCycleType() int32 {
	if x != nil {
		return x.CycleType
	}
	return 0
}

func (x *ActivityCfg) GetTimeType() int32 {
	if x != nil {
		return x.TimeType
	}
	return 0
}

func (x *ActivityCfg) GetBeginTime() int32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *ActivityCfg) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ActivityCfg) GetExchangeIds() []int32 {
	if x != nil {
		return x.ExchangeIds
	}
	return nil
}

func (x *ActivityCfg) GetIsOff() bool {
	if x != nil {
		return x.IsOff
	}
	return false
}

func (x *ActivityCfg) GetRemoveDataWhenEnd() bool {
	if x != nil {
		return x.RemoveDataWhenEnd
	}
	return false
}

func (x *ActivityCfg) GetMinPlayerLevel() int32 {
	if x != nil {
		return x.MinPlayerLevel
	}
	return 0
}

func (x *ActivityCfg) GetMaxPlayerLevel() int32 {
	if x != nil {
		return x.MaxPlayerLevel
	}
	return 0
}

func (x *ActivityCfg) GetQuestIds() []int32 {
	if x != nil {
		return x.QuestIds
	}
	return nil
}

func (x *ActivityCfg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// 升级经验
type LevelExp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   int32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`     // 等级
	NeedExp int32 `protobuf:"varint,2,opt,name=NeedExp,proto3" json:"NeedExp,omitempty"` // 升到该等级需要的经验值
}

func (x *LevelExp) Reset() {
	*x = LevelExp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelExp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelExp) ProtoMessage() {}

func (x *LevelExp) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelExp.ProtoReflect.Descriptor instead.
func (*LevelExp) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{15}
}

func (x *LevelExp) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LevelExp) GetNeedExp() int32 {
	if x != nil {
		return x.NeedExp
	}
	return 0
}

// 商店配置
type ShopCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CfgId       int32             `protobuf:"varint,1,opt,name=CfgId,proto3" json:"CfgId,omitempty"`                                                                                                  // 商店id
	Name        string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                                                                                                     // 商店名
	ExchangeIds []int32           `protobuf:"varint,3,rep,packed,name=ExchangeIds,proto3" json:"ExchangeIds,omitempty"`                                                                               // 商店的每1个格子就是1个兑换礼包
	Properties  map[string]string `protobuf:"bytes,8,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 扩展属性
}

func (x *ShopCfg) Reset() {
	*x = ShopCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cfg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopCfg) ProtoMessage() {}

func (x *ShopCfg) ProtoReflect() protoreflect.Message {
	mi := &file_cfg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopCfg.ProtoReflect.Descriptor instead.
func (*ShopCfg) Descriptor() ([]byte, []int) {
	return file_cfg_proto_rawDescGZIP(), []int{16}
}

func (x *ShopCfg) GetCfgId() int32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *ShopCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShopCfg) GetExchangeIds() []int32 {
	if x != nil {
		return x.ExchangeIds
	}
	return nil
}

func (x *ShopCfg) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

var File_cfg_proto protoreflect.FileDescriptor

var file_cfg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x22, 0x2f, 0x0a, 0x07, 0x49, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x03, 0x0a, 0x07, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x66, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x72, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x41, 0x72, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x86, 0x02, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x72, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x72, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x72, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x72, 0x67, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x06, 0x43, 0x66, 0x67,
	0x41, 0x72, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x72, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x41, 0x72, 0x67, 0x22, 0x33, 0x0a, 0x07, 0x43,
	0x66, 0x67, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x41, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73,
	0x22, 0x9f, 0x05, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x66, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x66,
	0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x72, 0x67, 0x52, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x35,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x66, 0x67, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x66, 0x67, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x66, 0x67, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x66, 0x67, 0x41, 0x72,
	0x67, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x39, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x43, 0x66, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x84, 0x02,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x66, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x66,
	0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x70, 0x12, 0x4d, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x04, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x66, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x50, 0x0a, 0x0e, 0x49,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x66, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x49,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x59, 0x0a,
	0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x66, 0x67, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5b,
	0x0a, 0x13, 0x49, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x66, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x84, 0x05, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x66, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x0e, 0x49, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x66, 0x67,
	0x2e, 0x49, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x49, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x66, 0x67, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x43, 0x66, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x04, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x66, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x66, 0x67, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x72, 0x67, 0x52, 0x08, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x72, 0x67, 0x52, 0x07, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x66, 0x67, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x04, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x66, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4f,
	0x66, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4f, 0x66, 0x66, 0x12,
	0x2c, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x57, 0x68, 0x65,
	0x6e, 0x45, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x57, 0x68, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d,
	0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a,
	0x0a, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x4e, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x22, 0xd6, 0x01, 0x0a, 0x07, 0x53,
	0x68, 0x6f, 0x70, 0x43, 0x66, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x66, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0x69, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x47, 0x72, 0x61, 0x79, 0x10, 0x05, 0x2a, 0x38,
	0x0a, 0x0b, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x44, 0x61, 0x79, 0x10, 0x01, 0x2a, 0x48, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x61, 0x74, 0x65,
	0x10, 0x02, 0x2a, 0x31, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x10, 0x01, 0x2a, 0x4e, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x78, 0x70, 0x10, 0x02, 0x2a, 0x25, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x2a, 0x3c, 0x0a, 0x0c,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x48, 0x69, 0x64, 0x65, 0x10, 0x01, 0x2a, 0x52, 0x0a, 0x09, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x2a, 0x27,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x2a, 0x48, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x10,
	0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cfg_proto_rawDescOnce sync.Once
	file_cfg_proto_rawDescData = file_cfg_proto_rawDesc
)

func file_cfg_proto_rawDescGZIP() []byte {
	file_cfg_proto_rawDescOnce.Do(func() {
		file_cfg_proto_rawDescData = protoimpl.X.CompressGZIP(file_cfg_proto_rawDescData)
	})
	return file_cfg_proto_rawDescData
}

var file_cfg_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_cfg_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_cfg_proto_goTypes = []interface{}{
	(Color)(0),                   // 0: gserver.Color
	(RefreshType)(0),             // 1: gserver.RefreshType
	(TimeType)(0),                // 2: gserver.TimeType
	(ItemType)(0),                // 3: gserver.ItemType
	(ItemSubType)(0),             // 4: gserver.ItemSubType
	(ItemCategory)(0),            // 5: gserver.ItemCategory
	(ItemViewType)(0),            // 6: gserver.ItemViewType
	(QuestType)(0),               // 7: gserver.QuestType
	(QuestCategory)(0),           // 8: gserver.QuestCategory
	(ExchangeCategory)(0),        // 9: gserver.ExchangeCategory
	(*ItemNum)(nil),              // 10: gserver.ItemNum
	(*IdCount)(nil),              // 11: gserver.IdCount
	(*ItemCfg)(nil),              // 12: gserver.ItemCfg
	(*AddElemArg)(nil),           // 13: gserver.AddElemArg
	(*DelElemArg)(nil),           // 14: gserver.DelElemArg
	(*CfgArg)(nil),               // 15: gserver.CfgArg
	(*CfgArgs)(nil),              // 16: gserver.CfgArgs
	(*QuestCfg)(nil),             // 17: gserver.QuestCfg
	(*ValueCompareCfg)(nil),      // 18: gserver.ValueCompareCfg
	(*ConditionCfg)(nil),         // 19: gserver.ConditionCfg
	(*ConditionTemplateCfg)(nil), // 20: gserver.ConditionTemplateCfg
	(*ProgressCfg)(nil),          // 21: gserver.ProgressCfg
	(*ProgressTemplateCfg)(nil),  // 22: gserver.ProgressTemplateCfg
	(*ExchangeCfg)(nil),          // 23: gserver.ExchangeCfg
	(*ActivityCfg)(nil),          // 24: gserver.ActivityCfg
	(*LevelExp)(nil),             // 25: gserver.LevelExp
	(*ShopCfg)(nil),              // 26: gserver.ShopCfg
	nil,                          // 27: gserver.ItemCfg.PropertiesEntry
	nil,                          // 28: gserver.AddElemArg.PropertiesEntry
	nil,                          // 29: gserver.DelElemArg.PropertiesEntry
	nil,                          // 30: gserver.QuestCfg.PropertiesEntry
	nil,                          // 31: gserver.ConditionCfg.PropertiesEntry
	nil,                          // 32: gserver.ConditionTemplateCfg.PropertiesEntry
	nil,                          // 33: gserver.ProgressCfg.IntEventFieldsEntry
	nil,                          // 34: gserver.ProgressCfg.StringEventFieldsEntry
	nil,                          // 35: gserver.ProgressCfg.PropertiesEntry
	nil,                          // 36: gserver.ProgressTemplateCfg.IntEventFieldsEntry
	nil,                          // 37: gserver.ProgressTemplateCfg.StringEventFieldsEntry
	nil,                          // 38: gserver.ProgressTemplateCfg.PropertiesEntry
	nil,                          // 39: gserver.ExchangeCfg.PropertiesEntry
	nil,                          // 40: gserver.ActivityCfg.PropertiesEntry
	nil,                          // 41: gserver.ShopCfg.PropertiesEntry
}
var file_cfg_proto_depIdxs = []int32{
	27, // 0: gserver.ItemCfg.Properties:type_name -> gserver.ItemCfg.PropertiesEntry
	28, // 1: gserver.AddElemArg.Properties:type_name -> gserver.AddElemArg.PropertiesEntry
	29, // 2: gserver.DelElemArg.Properties:type_name -> gserver.DelElemArg.PropertiesEntry
	13, // 3: gserver.QuestCfg.Rewards:type_name -> gserver.AddElemArg
	19, // 4: gserver.QuestCfg.Conditions:type_name -> gserver.ConditionCfg
	21, // 5: gserver.QuestCfg.Progress:type_name -> gserver.ProgressCfg
	30, // 6: gserver.QuestCfg.Properties:type_name -> gserver.QuestCfg.PropertiesEntry
	16, // 7: gserver.QuestCfg.ConditionTemplates:type_name -> gserver.CfgArgs
	15, // 8: gserver.QuestCfg.ProgressTemplate:type_name -> gserver.CfgArg
	31, // 9: gserver.ConditionCfg.Properties:type_name -> gserver.ConditionCfg.PropertiesEntry
	32, // 10: gserver.ConditionTemplateCfg.Properties:type_name -> gserver.ConditionTemplateCfg.PropertiesEntry
	33, // 11: gserver.ProgressCfg.IntEventFields:type_name -> gserver.ProgressCfg.IntEventFieldsEntry
	34, // 12: gserver.ProgressCfg.StringEventFields:type_name -> gserver.ProgressCfg.StringEventFieldsEntry
	35, // 13: gserver.ProgressCfg.Properties:type_name -> gserver.ProgressCfg.PropertiesEntry
	36, // 14: gserver.ProgressTemplateCfg.IntEventFields:type_name -> gserver.ProgressTemplateCfg.IntEventFieldsEntry
	37, // 15: gserver.ProgressTemplateCfg.StringEventFields:type_name -> gserver.ProgressTemplateCfg.StringEventFieldsEntry
	38, // 16: gserver.ProgressTemplateCfg.Properties:type_name -> gserver.ProgressTemplateCfg.PropertiesEntry
	19, // 17: gserver.ExchangeCfg.Conditions:type_name -> gserver.ConditionCfg
	14, // 18: gserver.ExchangeCfg.Consumes:type_name -> gserver.DelElemArg
	13, // 19: gserver.ExchangeCfg.Rewards:type_name -> gserver.AddElemArg
	39, // 20: gserver.ExchangeCfg.Properties:type_name -> gserver.ExchangeCfg.PropertiesEntry
	16, // 21: gserver.ExchangeCfg.ConditionTemplates:type_name -> gserver.CfgArgs
	40, // 22: gserver.ActivityCfg.Properties:type_name -> gserver.ActivityCfg.PropertiesEntry
	41, // 23: gserver.ShopCfg.Properties:type_name -> gserver.ShopCfg.PropertiesEntry
	18, // 24: gserver.ProgressCfg.IntEventFieldsEntry.value:type_name -> gserver.ValueCompareCfg
	18, // 25: gserver.ProgressTemplateCfg.IntEventFieldsEntry.value:type_name -> gserver.ValueCompareCfg
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_cfg_proto_init() }
func file_cfg_proto_init() {
	if File_cfg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cfg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddElemArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelElemArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CfgArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CfgArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueCompareCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionTemplateCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressTemplateCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelExp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cfg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cfg_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cfg_proto_goTypes,
		DependencyIndexes: file_cfg_proto_depIdxs,
		EnumInfos:         file_cfg_proto_enumTypes,
		MessageInfos:      file_cfg_proto_msgTypes,
	}.Build()
	File_cfg_proto = out.File
	file_cfg_proto_rawDesc = nil
	file_cfg_proto_goTypes = nil
	file_cfg_proto_depIdxs = nil
}
