// Code generated by excelexporter. DO NOT EDIT
// https://github.com/fish-tennis/excelexporter
package cfg

import (
    "errors"
    "github.com/fish-tennis/gserver/pb"
    "path/filepath"
    "strings"
    "sync/atomic"
)

var (
    ErrLoadingConcurrency = errors.New("loading concurrency")
    isLoading   = int32(0)
    register = &processRegister{}

    {{range.Mgrs}}//{{.CodeComment}}
    {{if eq .MgrType "map"}}{{.MgrName}} *DataMap[*pb.{{.MessageName}}]{{end}}
    {{if eq .MgrType "slice"}}{{.MgrName}} *DataSlice[*pb.{{.MessageName}}]{{end}}
    {{if eq .MgrType "object"}}{{.MgrName}} *pb.{{.MessageName}}{{end}}{{end}}
)

// 预处理接口注册
type processRegister struct {
    {{range.Mgrs}}{{if eq .MgrType "map"}}{{.MgrName}}Process func(mgr *DataMap[*pb.{{.MessageName}}]) error{{end}}
    {{if eq .MgrType "slice"}}{{.MgrName}}Process func(mgr *DataSlice[*pb.{{.MessageName}}]) error{{end}}
    {{if eq .MgrType "object"}}{{.MgrName}}Process func(obj *pb.{{.MessageName}}) error{{end}}{{end}}
}

// filter:过滤接口,返回false则不加载该文件
func Load(dataDir string, filter func(fileName string) bool) error {
    if !atomic.CompareAndSwapInt32(&isLoading, 0, 1) {
        return ErrLoadingConcurrency
    }
    defer atomic.StoreInt32(&isLoading, 0)
    dataDir = filepath.ToSlash(dataDir)
    if strings.LastIndexByte(dataDir, '/') != len(dataDir)-1 {
        dataDir += string('/')
    }
    var err error
    {{range.Mgrs}}
    if filter == nil || filter("{{.FileName}}") {
        // 考虑到并发安全,这里先加载到临时变量
        {{if eq .MgrType "map"}}tmp{{.MgrName}} := NewDataMap[*pb.{{.MessageName}}]()
        err = tmp{{.MgrName}}.LoadJson(dataDir+"{{.FileName}}")
        {{else if eq .MgrType "slice"}}tmp{{.MgrName}} := &DataSlice[*pb.{{.MessageName}}]{}
        err = tmp{{.MgrName}}.LoadJson(dataDir+"{{.FileName}}")
        {{end}}if err != nil {
            return err
        }
        // 最后再赋值给全局变量(引用赋值是原子操作)
        {{.MgrName}} = tmp{{.MgrName}}
    }{{end}}

    {{range.Mgrs}}
    if register.{{.MgrName}}Process != nil {
        // 预处理数据
        err = register.{{.MgrName}}Process({{.MgrName}})
        if err != nil {
            return err
        }
    }
    {{end}}
    return err
}
