// Code generated by excelexporter. DO NOT EDIT
package cfg

import (
    "errors"
    "github.com/fish-tennis/gserver/pb"
    "sync/atomic"
)

var (
    ErrLoadingConcurrency = errors.New("loading concurrency")
    isLoading   = int32(0)
    {{range.Mgrs}}//{{.CodeComment}}
    {{if eq .MgrType "map"}}{{.MgrName}} *DataMap[*pb.{{.MessageName}}]{{end}}
    {{if eq .MgrType "slice"}}{{.MgrName}} *DataSlice[*pb.{{.MessageName}}]{{end}}
    {{if eq .MgrType "object"}}{{.MgrName}} *pb.{{.MessageName}}{{end}}{{end}}
)

// processFn:预处理接口
// filter:过滤接口,返回false则不加载该文件
func Load(dataDir string, processFn func(mgr any, mgrName,messageName,fileName string) error, filter func(fileName string) bool) error {
    if !atomic.CompareAndSwapInt32(&isLoading, 0, 1) {
        return ErrLoadingConcurrency
    }
    defer atomic.StoreInt32(&isLoading, 0)
    var err error
    {{range.Mgrs}}
    if filter == nil || filter("{{.FileName}}") {
        // 考虑到并发安全,这里先加载到临时变量
        {{if eq .MgrType "map"}}tmp{{.MgrName}} := NewDataMap[*pb.{{.MessageName}}]()
        err = tmp{{.MgrName}}.LoadJson(dataDir+"{{.FileName}}")
        {{else if eq .MgrType "slice"}}tmp{{.MgrName}} := &DataSlice[*pb.{{.MessageName}}]{}
        err = tmp{{.MgrName}}.LoadJson(dataDir+"{{.FileName}}")
        {{end}}if err != nil {
            return err
        }
        if processFn != nil {
            // 预处理数据
            err = processFn(tmp{{.MgrName}}, "{{.MgrName}}", "{{.MessageName}}", "{{.FileName}}")
            if err != nil {
                return err
            }
        }
        // 最后再赋值给全局变量(引用赋值是原子操作)
        {{.MgrName}} = tmp{{.MgrName}}
    }{{end}}
    return err
}

